# Your data and other code remain unchanged

root = tk.Tk()
root.title('Scenarios Mosaic')

# Creation of tabs
tabControl = ttk.Notebook(root)
tab1 = ttk.Frame(tabControl)
tab2 = ttk.Frame(tabControl)

# Configuration of tabs
tabControl.add(tab1, text='Scenario groups')
tabControl.add(tab2, text='Scenario datalabels')
tabControl.pack(expand=1, fill="both")

root.geometry('1100x700')

# Create left and right frames for both tabs
left_frame = tk.Frame(tab1)
left_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=3, pady=3)

right_frame = tk.Frame(tab1)
right_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=3, pady=3)

# Create a Listbox with the Scrollbar in the left frame
listbox = tk.Listbox(left_frame, selectmode=tk.MULTIPLE)
listbox.pack(fill=tk.BOTH, expand=True)

# Create a Scrollbar and associate it with the Listbox
scrollbar = tk.Scrollbar(left_frame, command=listbox.yview)
scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
listbox.config(yscrollcommand=scrollbar.set)

# Update your existing Listbox references
Listbox = listbox

# Add filter blocks to the left frame and filtering out the Active status column
for column in data2.columns:
    if column != 'active':
        listbox = add_filter_block(left_frame, column, data2[column].unique())
        filter_blocks.append((column, listbox))

# The rest of your code remains unchanged
filter_button = tk.Button(left_frame, text='Filter Data', command=partial(display_filtered_data, data2, filter_blocks))
filter_button.pack(ipadx=40, ipady=10, padx=10, pady=10)

export_button = tk.Button(left_frame, text='Export Data', command=partial(export_filtered_data, data2, filter_blocks))
export_button.pack(ipadx=40, ipady=10, padx=10, pady=10)

clear_button = tk.Button(left_frame, text='Clear Filters', command=clear_filters)
clear_button.pack(ipadx=40, ipady=10, padx=10, pady=10)

# Display filtered data result in the right frame
result_text = tk.Text(right_frame, wrap=tk.NONE, state=tk.DISABLED)
result_text.pack(fill=tk.BOTH, expand=True)

# Summary label in the right frame
summary_label = tk.Label(right_frame, text='', wraplength=300)
summary_label.pack()

root.mainloop()
